---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xudong12.
--- DateTime: 2020/7/6 7:22 PM
---

-- IDX竞价模型
--
--  Note: 本模块及其子模块[能且仅能]修改cands[i].inter内的数据，对其他数据结构不得做修改。


local DefaultBidModelV3 = require("ad_idx.idx_bid_module.bid_module_v3")
local DefaultBidModelV2 = require("ad_idx.idx_bid_module.bid_module_v2")
local DefaultBidModelV1 = require("ad_idx.idx_bid_module.bid_module_v1")
local _M = { _VERSION = "0.0.1"}
local cjson = require('cjson')
local BID_MODELS = {
    v3 = DefaultBidModelV3,
    v2 = DefaultBidModelV2,
    v1 = DefaultBidModelV1,
}

function _M:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end

-- 获取竞价模型
-- 依据请求参数决定使用何种竞价模型
function _M:match_model()
    if self.model_version == nil then
        return DefaultBidModelV1
    end
    local model = BID_MODELS[self.model_version]
    return model
end

-- 竞价
-- @return cand table 返回竞价成功的候选,无候选则返回nil
function _M:bid()
    if next(self.cands) == nil then
        ngx.log(ngx.ERR, "cands is empty")
        return nil
    end

    -- 若只有一个候选，则不需要竞价，更新竞价状态后直接返回，提升效率
    local cand = self.cands[1]
    if cand[1] and cand[1].bid_version and #self.products == 1 then
        self.model_version = cand[1].bid_version
    elseif cand[1] and cand[1].bid_version and #self.products > 1 then -- 多产品竞价 不限制个数 都有多少全返回
        self.model_version = 'v2'
    end
    --  获取竞价模型
    local model = self:match_model()
    local all_ads = {}
    for _,item in pairs(self.cands) do
        for _, ad in pairs(item) do
            table.insert(all_ads,ad)
        end
    end

    --  竞价计算
    local win = model.bid(all_ads, self.ad_counts)
    if win == nil then
        ngx.log(ngx.ERR, string.format("%s bid failed", model.name))
        return nil
    end


    return win
end


return _M
